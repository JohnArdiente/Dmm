@{
    ViewData["Title"] = "Home Page";
}

<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />

<style>
    .btn.disabled {
        opacity: 0.65;
        pointer-events: none;
    }

    #itemsTable th:nth-child(2),
    #itemsTable td:nth-child(2) {
        width: 200px;
        text-align: center;
    }
    .weight-row .clickable-weight {
        cursor: pointer;
    }

    .weight-row.selected {
        background-color: #D3D3D3;
    }

    .weight-row {
        position: relative;
    }

    .tooltip {
        visibility: hidden;
        width: 120px;
        background-color: black;
        color: #fff;
        text-align: center;
        border-radius: 5px;
        padding: 5px;
        position: absolute;
        z-index: 1;
        bottom: 100%;
        left: 50%;
        margin-left: -60px;
        opacity: 0;
        transition: opacity 0.3s;
        font-size: 12px;
    }

    .weight-row:hover .tooltip {
        visibility: visible;
        opacity: 1;
    }
</style>

<div class="content">
    <div class="container">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-body">
                        <h3 class="card-title">ENTRY NAME</h3>
                        <div class="d-flex justify-content-end mb-3">
                            <a href="#" class="btn btn-sm btn-success ml-auto" data-toggle="modal" data-target="#addRecordModal">ADD RECORD</a>
                            <a href="#" class="btn btn-sm btn-primary ml-2" data-toggle="modal" data-target="#noFight">REQUEST NO FIGHT</a>

                            <div class="dropdown">
                                <a href="#" class="btn btn-sm btn-info ml-2 dropdown-toggle" id="dropdownMenuLink" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    <i class="fas fa-cog"></i> Configuration
                                </a>
                                <div class="dropdown-menu" aria-labelledby="dropdownMenuLink">
                                    <a href="#" class="btn btn-sm ml-2" data-toggle="modal" data-target="#eventIdModal">Set Event ID</a>
                                    <a href="#" class="btn btn-sm ml-2" data-toggle="modal" data-target="#configModal">Set Number of Cock</a>
                                    <a href="#" class="btn btn-sm ml-2" data-toggle="modal" data-target="#gtModal">Set Give and Take</a>
                                </div>
                            </div>


                        </div>
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th scope="col">ENTRY NAME</th>
                                    <th scope="col">MEMBER ID/NAME</th>
                                    <th scope="col">BET</th>
                                    <th scope="col">ACTIONS</th>
                                </tr>
                            </thead>
                            <tbody id="entryTableBody">
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="col-md-12 mb-3">
                <div class="d-flex justify-content-start">
                    <button id="manualMatchBtn" class="btn btn-sm btn-primary mr-2">
                        <span>MANUAL MATCH</span>
                    </button>
                    <button id="generateMatchesBtn" class="btn btn-sm btn-info mr-2">
                        <span id="btnText">GENERATE MATCHES</span>
                        <span id="btnLoading" class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                    </button>
                    <a href="#" id="generateExcelBtn" class="btn btn-sm btn-success d-none">GENERATE EXCEL</a>
                </div>
            </div>

            <div class="col-lg-6">
                <div class="card">
                    <div class="card-header alert-primary d-flex justify-content-center">
                        <h5 class="card-title m-0 text-center">MANUAL MATCH ENTRIES</h5>
                    </div>
                    <div class="card-body">
                        <table id="itemsTable" class="table" border="1" cellpadding="10">
                            <thead>
                                <tr>
                                    <th>Entry Name</th>
                                    <th>Weight</th>
                                </tr>
                            </thead>
                            <tbody>
                            </tbody>
                        </table>
                        <br>
                        <button id="manualMatchButton" class="btn btn-success" disabled>Match Selected Weights</button>
                    </div>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="card">
                    <div class="card-header alert-info d-flex justify-content-between align-items-center">
                        <div class="d-flex justify-content-center flex-grow-1">
                            <h5 class="card-title m-0">MATCHED ENTRIES</h5>
                        </div>
                        <button id="resetButton" class="btn btn-warning btn-sm">
                            <i class="fas fa-redo"></i> Reset
                        </button>
                    </div>
                    <div class="card-body">
                        <table id="matchesTable" class="table" border="1" cellpadding="10">
                            <thead>
                                <tr>
                                    <th>Entry Name</th>
                                    <th>Weight</th>
                                    <th>Weight</th>
                                    <th>Entry Name</th>
                                </tr>
                            </thead>
                            <tbody>
                            </tbody>
                        </table>
                        <br>
                        <div class="d-flex justify-content-between">
                            <button id="saveAllChangesButton" class="btn btn-secondary">Save All Changes</button>

                            <div class="btn-group">
                                <button onclick="location.href='@Url.Action("GenerateManualSequence", "Home")'" class="btn btn-info">Generate Sequence</button>
                                <button onclick="location.href='@Url.Action("GenerateExcelManualMatches", "Home")'" class="btn btn-success">Generate Excel</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-lg-6">
                <div class="card">
                    <div class="card-header alert-danger d-flex justify-content-center">
                        <h5 class="card-title m-0 text-center">MERON</h5>
                    </div>
                    <div class="card-body">
                        <table class="table table-striped" id="meronTable">
                            <thead>
                                <tr>
                                    <th>NO</th>
                                    <th>ENTRY NAME</th>
                                    <th>WEIGHT</th>
                                    <th>WING BAND</th>
                                </tr>
                            </thead>
                            <tbody>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="card">
                    <div class="card-header alert-primary d-flex justify-content-center">
                        <h5 class="card-title m-0 text-center">WALA</h5>
                    </div>
                    <div class="card-body">
                        <table class="table table-striped" id="walaTable">
                            <thead>
                                <tr>
                                    <th>NO</th>
                                    <th>ENTRY NAME</th>
                                    <th>WEIGHT</th>
                                    <th>WING BAND</th>
                                </tr>
                            </thead>
                            <tbody>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header alert-warning d-flex justify-content-center">
                        <h5 class="card-title m-0 text-center">UNMATCHED</h5>
                    </div>
                    <div class="card-body">
                        <table class="table" id="unMatched">
                            <thead>
                                <tr>
                                    <th>NO</th>
                                    <th>ENTRY NAME</th>
                                    <th>WEIGHT</th>
                                    <th>WING BAND</th>
                                </tr>
                            </thead>
                            <tbody>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="addRecordModal" tabindex="-1" aria-labelledby="addRecordModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addRecordModalLabel">Add New Record</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="addRecordForm" autocomplete="off">
                    <div class="form-group">
                        <label for="entryName">Entry Name</label>
                        <input type="text" class="form-control" id="entryName" name="EntryName" required>
                    </div>
                    <div class="form-group">
                        <label for="ownerFinancer">Owner</label>
                        <input type="text" class="form-control" id="ownerFinancer" name="OwnerName" required>
                    </div>
                    <div class="form-group">
                        <label for="bet">Bet</label>
                        <input type="text" class="form-control" id="bet" name="Bet" required>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <label> WEIGHT </label>
                            @for (int i = 0; i < ViewBag.gT; i++)
                            {
                                <div>
                                    <input type="text" class="form-control mb-2" name="EntryData[@i].Weight" />
                                </div>
                            }
                        </div>
                        <div class="col-md-6">
                            <label> WB # </label>
                            @for (int i = 0; i < ViewBag.gT; i++)
                            {
                                <div>
                                    <input type="text" class="form-control mb-2 wingban-input" name="EntryData[@i].WingBan" />
                                    <div class="invalid-feedback d-none">This Wing Band number already exists.</div>
                                </div>
                            }
                        </div>
                    </div>
                    <button type="submit" class="btn btn-md btn-success fa-pull-right w-100">Submit</button>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="editRecordModal" tabindex="-1" aria-labelledby="editRecordModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editRecordModalLabel">Edit Record</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="editRecordForm" autocomplete="off">
                    <div class="form-group">
                        <label for="editEntryName">Entry Name</label>
                        <input type="text" class="form-control" id="editEntryName" name="EntryName" required>
                    </div>
                    <div class="form-group">
                        <label for="editOwnerName">Owner</label>
                        <input type="text" class="form-control" id="editOwnerName" name="OwnerName" required>
                    </div>
                    <div class="form-group">
                        <label for="editBet">Bet</label>
                        <input type="text" class="form-control" id="editBet" name="Bet" required>
                    </div>
                    <div class="row">
                        <div class="col-md-6" id="editWeightsContainer">
                            <label> WEIGHT </label>
                        </div>
                        <div class="col-md-6" id="editWingBansContainer">
                            <label> WB # </label>
                        </div>
                    </div>
                    <input type="hidden" id="editEntryId" name="EntryId" />
                    <button type="submit" class="btn btn-md btn-success fa-pull-right w-100">Update</button>
                </form>
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="eventIdModal" tabindex="-1" role="dialog" aria-labelledby="eventIdModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="eventIdModalLabel">Set Event ID</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="gTForm">
                    <div class="form-group">
                        <label>EventID</label>
                        <input type="text" name="eventId" id="eventId" class="form-control" />
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-success" id="saveEvent">Save</button>
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="configModal" tabindex="-1" role="dialog" aria-labelledby="gtModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="configModalLabel">Number of Cock Derby</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="configForm">
                    <div class="form-group">
                        <select class="form-control" id="configInput">
                            <option>1</option>
                            <option>2</option>
                            <option>3</option>
                            <option>4</option>
                            <option>5</option>
                            <option>6</option>
                            <option>7</option>
                            <option>8</option>
                            <option>9</option>
                            <option>10</option>
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-success" id="saveConfig">Save</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="gtModal" tabindex="-1" role="dialog" aria-labelledby="gtModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="gtModalLabel">Set Give and Take</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="gTForm">
                    <div class="form-group">
                        <label>Plus/Minus</label>
                        <input type="text" name="plusMinus" id="plusMinus" class="form-control" />
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-success" id="saveGt">Save</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="noFight" tabindex="-1" role="dialog" aria-labelledby="configModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="configModalLabel">Request no Fight</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="entriesForm">
                    <div class="form-group">
                        <label>Requestor</label>
                        <select id="requestorSelect" class="form-control" style="width: 450px;">
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Entry Name</label>
                        <select id="entriesSelect" class="entries" multiple="multiple">
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button id="submitBtn" type="button" class="btn btn-success">Save</button>
            </div>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.12.4/dist/sweetalert2.all.min.js"></script>

<script>
    let selectedWeights = [];

    $(document).ready(function () {
        $('#itemsTable').closest('.col-lg-6').addClass('d-none');
        $('#matchesTable').closest('.col-lg-6').addClass('d-none');

        loadItems();

        $('#manualMatchBtn').on('click', function () {
            $('#meronTable').closest('.card').addClass('d-none');
            $('#walaTable').closest('.card').addClass('d-none');
            $('#unMatched').closest('.card').addClass('d-none');

            $('#itemsTable').closest('.col-lg-6').removeClass('d-none');
            $('#matchesTable').closest('.col-lg-6').removeClass('d-none');
        });

        $('#manualMatchButton').on('click', function () {
            if (selectedWeights.length === 2) {
                console.log('Selected Weights:', selectedWeights);
                const matchesTableBody = $('#matchesTable tbody');
                matchesTableBody.append(`
                    <tr data-id1="${selectedWeights[0].id}" data-id2="${selectedWeights[1].id}">
                        <td>${selectedWeights[0].name}</td>
                        <td>${selectedWeights[0].value}</td>
                        <td>${selectedWeights[1].value}</td>
                        <td>${selectedWeights[1].name}</td>
                    </tr>
                `);

                selectedWeights.forEach(weight => {
                    $(`#itemsTable tbody .weight-row[data-id="${weight.id}"]`).remove();
                });

                $('.weight-row').css('background-color', '');
                selectedWeights = [];
                $('#manualMatchButton').prop('disabled', true);
            }
        });
    });

    function loadItems() {
        $.ajax({
            url: '@Url.Action("GetItems", "Home")',
            method: 'GET',
            success: function (data) {
                const tableBody = $('#itemsTable tbody');
                tableBody.empty();

                if (Array.isArray(data)) {
                    data.forEach(function (entry) {
                        if (entry.EntryData && entry.EntryData.length > 0) {
                            tableBody.append(`
                                <tr>
                                    <td><strong>${entry.EntryName}</strong></td>
                                    <td class="clickable-weight weight-row" data-id="${entry.EntryData[0].Id}" data-name="${entry.EntryName}" data-weight="${entry.EntryData[0].Weight}" data-bet="${entry.Bet}">
                                        ${entry.EntryData[0].Weight}
                                        <span class="tooltip">${entry.Bet}</span>
                                    </td>
                                </tr>
                            `);

                            for (let i = 1; i < entry.EntryData.length; i++) {
                                const entryData = entry.EntryData[i];
                                tableBody.append(`
                                        <tr class="weight-row" data-id="${entryData.Id}" data-name="${entry.EntryName}" data-weight="${entryData.Weight}" data-bet="${entry.Bet}">
                                        <td></td> <!-- Empty cell to align with entry name -->
                                            <td>${entryData.Weight}
                                            <span class="tooltip">${entry.Bet}</span>
                                        </td>
                                    </tr>
                                `);
                            }
                        } else {
                            tableBody.append(`
                                <tr>
                                    <td><strong>${entry.EntryName}</strong></td>
                                    <td>No Weights Available</td>
                                </tr>
                            `);
                        }
                    });

                    $('.weight-row').on('click', function () {
                        const weightId = $(this).data('id');
                        const weightName = $(this).data('name');
                        const weightValue = $(this).data('weight');

                        if (selectedWeights.some(w => w.id === weightId)) {
                            $(this).css('background-color', '');
                            selectedWeights = selectedWeights.filter(w => w.id !== weightId);
                        } else if (selectedWeights.length < 2) {
                            $(this).css('background-color', '#D3D3D3');
                            selectedWeights.push({ id: weightId, name: weightName, value: weightValue });
                        }

                        $('#manualMatchButton').prop('disabled', selectedWeights.length !== 2);
                    });
                } else {
                    console.error("Data is not an array:", data);
                }
            },
            error: function (xhr, status, error) {
                console.error("AJAX Error:", status, error);
            }
        });
    }

    $('#saveAllChangesButton').on('click', function () {
        let matchedEntries = [];

        $('#matchesTable tbody tr').each(function () {
            let entry = {
                id1: $(this).data('id1'),
                entryName1: $(this).find('td').eq(0).text(),
                weight1: $(this).find('td').eq(1).text(),
                id2: $(this).data('id2'),
                entryName2: $(this).find('td').eq(3).text(),
                weight2: $(this).find('td').eq(2).text()
            };
            matchedEntries.push(entry);
        });

        if (matchedEntries.length > 0) {
            console.log('Matched Entries:', matchedEntries);
            $.ajax({
                url: '@Url.Action("SaveManualMatchedEntries", "Home")',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(matchedEntries),
                success: function (result) {
                    if (result.success) {
                        Swal.fire({
                            title: 'Success',
                            text: 'Matched entries saved successfully!.',
                            icon: 'success',
                            showConfirmButton: false,
                            timer: 2000
                        });
                    } else {
                        Swal.fire({
                            title: 'Error',
                            text: 'Error submitting the form.',
                            icon: 'error',
                            showConfirmButton: false,
                            timer: 2000
                        }).then(function () {
                            $("#gtModal").modal("hide");
                            location.reload();
                        });
                    }
                },
                error: function (xhr, status, error) {
                    console.error('Error saving data:', status, error);
                }
            });
        } else {
            Swal.fire({
                title: 'Error',
                text: 'No matched entries to save.',
                icon: 'error',
                showConfirmButton: false,
                timer: 2000
            }).then(function () {
            });
        }
    });

    $.ajax({
        url: '@Url.Action("GetMatchedEntries", "Home")',
        method: 'GET',
        success: function (data) {
            $('#matchesTable tbody').empty();

            data.forEach(function (entry) {
                $('#matchesTable tbody').append(`
                        <tr>
                            <td>${entry.EntryName1}</td>
                            <td>${entry.Weight1}</td>
                            <td>${entry.EntryName2}</td>
                            <td>${entry.Weight2}</td>
                        </tr>
                    `);
            });
        },
        error: function (xhr, status, error) {
            console.error("Error fetching matched entries:", error);
        }
    });


    $('#resetButton').on('click', function () {
        let matchedEntries = [];

        $('#matchesTable tbody tr').each(function () {
            let entry = {
                id1: $(this).data('id1'),
                entryName1: $(this).find('td').eq(0).text(),
                weight1: $(this).find('td').eq(1).text(),
                id2: $(this).data('id2'),
                entryName2: $(this).find('td').eq(3).text(),
                weight2: $(this).find('td').eq(2).text()
            };
            matchedEntries.push(entry);
        });
        $.ajax({
            url: '@Url.Action("ResetManualMatches", "Home")',
            method: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(matchedEntries),
            success: function (response) {
                $('#matchesTable tbody').empty();
                if (response.success) {
                    console.log('Reset successful:', response);
                    Swal.fire({
                        title: 'Success',
                        text: 'Entries have been reset.',
                        icon: 'success',
                        showConfirmButton: false,
                        timer: 2000
                    });
                } else {
                    console.error('Reset failed:', response.error);
                    Swal.fire({
                        title: 'Error',
                        text: 'Error resetting matches.',
                        icon: 'error',
                        showConfirmButton: false,
                        timer: 2000
                    });
                }
            },
            error: function (xhr, status, error) {
                console.error("Error resetting matches:", status, error);
                Swal.fire({
                    title: 'Error',
                    text: 'Error resetting matches.',
                    icon: 'error',
                    showConfirmButton: false,
                    timer: 2000
                });
            }
        });
    });

</script>

<script>
    $(document).ready(function () {

        $.ajax({
            url: '@Url.Action("GetEntries", "Home")',
            type: 'GET',
            success: function (data) {
                var $requestorSelect = $('#requestorSelect');
                var $entriesSelect = $('#entriesSelect');

                $requestorSelect.empty();
                $requestorSelect.append($('<option>', {
                    value: '',
                    text: 'Select Requestor'
                }));

                $.each(data, function (i, entry) {
                    $requestorSelect.append($('<option>', {
                        value: entry.id,
                        text: entry.text
                    }));
                });


                $entriesSelect.empty();
                $.each(data, function (i, entry) {
                    $entriesSelect.append($('<option>', {
                        value: entry.id,
                        text: entry.text
                    }));
                });

                $entriesSelect.select2({
                    width: '450px'
                });
            },
            error: function () {
                alert('Error loading entries.');
            }
        });
        $('.entries').select2({
            width: '450px',
            ajax: {
                url: '@Url.Action("GetEntries", "Home")',
                dataType: 'json',
                processResults: function (data) {
                    return {
                        results: data
                    };
                }
            }
        });

        $('#eventIdModal').on('show.bs.modal', function () {
            $.ajax({
                url: '@Url.Action("GetEventId", "Home")',
                type: 'GET',
                dataType: 'json',
                success: function (data) {
                    $('#eventId').val(data.eventId);
                },
                error: function (xhr, status, error) {
                    console.error('Error fetching the data:', error);
                }
            });
        });

        $('#saveEvent').click(function () {
            var eventIdValue = $('#eventId').val();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("SaveEventId", "Home")',
                data: { eventId: eventIdValue },
                success: function (result) {
                    if (result.success) {
                        Swal.fire({
                            title: 'Success',
                            text: 'Set/Give saved successfully.',
                            icon: 'success',
                            showConfirmButton: false,
                            timer: 2000
                        }).then(function () {
                            location.reload();
                        });
                    } else {
                        Swal.fire({
                            title: 'Error',
                            text: 'Error submitting the form.',
                            icon: 'error',
                            showConfirmButton: false,
                            timer: 2000
                        }).then(function () {
                            $("#gtModal").modal("hide");
                            location.reload();
                        });
                    }
                },
                error: function (xhr, status, error) {
                    console.log('Error occurred: ' + error);
                }
            });
        });

        $('#gtModal').on('show.bs.modal', function () {
            $.ajax({
                url: '@Url.Action("GetGiveAndTakeValue", "Home")',
                type: 'GET',
                dataType: 'json',
                success: function (data) {
                    $('#plusMinus').val(data.plusMinus);
                },
                error: function (xhr, status, error) {
                    console.error('Error fetching the data:', error);
                }
            });
        });

        $('#saveGt').click(function () {
            var plusMinusValue = $('#plusMinus').val();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("SaveGt", "Home")',
                data: { plusMinus: plusMinusValue },
                success: function (result) {
                    if (result.success) {
                        Swal.fire({
                            title: 'Success',
                            text: 'Set/Give saved successfully.',
                            icon: 'success',
                            showConfirmButton: false,
                            timer: 2000
                        }).then(function () {
                            location.reload();
                        });
                    } else {
                        Swal.fire({
                            title: 'Error',
                            text: 'Error submitting the form.',
                            icon: 'error',
                            showConfirmButton: false,
                            timer: 2000
                        }).then(function () {
                            $("#gtModal").modal("hide");
                            location.reload();
                        });
                    }
                },
                error: function (xhr, status, error) {
                    console.log('Error occurred: ' + error);
                }
            });
        });

        $('#requestorSelect').on('change', function () {
            var selectedRequestor = $(this).val();
            var $entriesSelect = $('#entriesSelect');

            $.ajax({
                url: '@Url.Action("GetEntries", "Home")',
                type: 'GET',
                success: function (data) {
                    $entriesSelect.empty();

                    $.each(data, function (i, entry) {
                        if (entry.id != selectedRequestor) {
                            $entriesSelect.append($('<option>', {
                                value: entry.id,
                                text: entry.text
                            }));
                        }
                    });

                    $entriesSelect.select2({
                        width: '450px'
                    });
                },
                error: function () {
                    alert('Error updating entries.');
                }
            });
        });

        $('#submitBtn').on('click', function () {
            var requestorId = $('#requestorSelect').val();
            var entryIds = $('#entriesSelect').val();
            if (!Array.isArray(entryIds)) {
                entryIds = [];
            }

            $.ajax({
                url: '@Url.Action("RequestNoFight", "Home")',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({
                    requestorId: parseInt(requestorId),
                    entryIds: entryIds.map(id => parseInt(id))
                }),
                success: function (response) {
                    Swal.fire({
                        title: 'Success',
                        text: 'Data saved successfully.',
                        icon: 'success',
                        showConfirmButton: false,
                        timer: 2000
                    }).then(function () {
                        location.reload();
                    });
                },
                error: function (xhr, status, error) {
                    Swal.fire({
                        title: 'Error',
                        text: 'An error occurred while saving the data.',
                        icon: 'error'
                    });
                    console.error(xhr.responseText);
                }
            });
        });

        $('#generateMatchesBtn').on('click', function (e) {
            e.preventDefault();
            $('#itemsTable').closest('.col-lg-6').addClass('d-none');
            $('#matchesTable').closest('.col-lg-6').addClass('d-none');

            $('#meronTable').closest('.card').removeClass('d-none');
            $('#walaTable').closest('.card').removeClass('d-none');
            $('#unMatched').closest('.card').removeClass('d-none');
            var $this = $(this);
            $this.prop('disabled', true).addClass('disabled');
            generateMatches();
        });

        function generateMatches() {
            var btn = $("#generateMatchesBtn");
            var btnText = $("#btnText");
            var btnLoading = $("#btnLoading");
            var generateExcelBtn = $("#generateExcelBtn");

            btnText.text("Generating...");
            btnLoading.removeClass("d-none");

            $.ajax({
                url: '@Url.Action("GenerateMatches", "Home")',
                type: 'GET',
                dataType: 'json',
                success: function (data) {
                    populateTables(data);
                    generateExcelBtn.removeClass("d-none");
                    btnText.text("MATCHES GENERATED");
                },
                error: function (xhr, status, error) {
                    console.error("Error generating matches:", error);
                    $btn.prop('disabled', false).removeClass('disabled');
                    btnText.text("GENERATE MATCHES");
                },
                complete: function () {
                    btnLoading.addClass("d-none");
                }
            });
        }

        $("#generateExcelBtn").on("click", function () {
            window.location.href = '@Url.Action("GenerateExcel", "Home")';
        });

        function populateTables(data) {
            populateTable("#meronTable", data.meron);
            populateTable("#walaTable", data.wala);
            populateTable("#unMatched", data.unmatched);
        }

        function populateTable(tableId, entries) {
            var tbody = $(tableId + " tbody");
            tbody.empty();
            $.each(entries, function (index, entry) {
                var row = $("<tr>");
                row.append($("<td>").text(index + 1));
                row.append($("<td>").text(entry.entryName));
                row.append($("<td>").text(entry.weight));
                row.append($("<td>").text(entry.wingBan || "N/A"));
                tbody.append(row);
            });
        }

        $('#addRecordForm').on('submit', function (e) {
            e.preventDefault();

            var entryName = $('#entryName').val();
            var ownerFinancer = $('#ownerFinancer').val();
            var bet = $('#bet').val();
            var entryData = [];

            var weights = $('input[name^="EntryData"][name$=".Weight"]');
            var wingBans = $('input[name^="EntryData"][name$=".WingBan"]');

            weights.each(function (index) {
                var weight = $(this).val().trim();
                var wingBan = wingBans.eq(index).val().trim();


                if (weight !== "" || wingBan !== "") {
                    entryData.push({
                        Weight: weight !== "" ? parseFloat(weight) : null,
                        WingBan: wingBan !== "" ? wingBan : null
                    });
                }
            });

            var entry = {
                EntryName: entryName,
                OwnerName: ownerFinancer,
                Bet: bet,
                EntryData: entryData
            };

            console.log(entry);

            $.ajax({
                url: '@Url.Action("SaveEntry", "Home")',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(entry),
                success: function (response) {
                    if (response.success) {
                        Swal.fire({
                            title: 'Success',
                            text: 'Data saved successfully.',
                            icon: 'success',
                            showConfirmButton: false,
                            timer: 2000
                        }).then(function () {
                            location.reload();
                        });

                    } else {
                        Swal.fire('Error', response.message, 'error');
                    }
                },
                error: function () {
                    Swal.fire('Error', 'An error occurred while processing the request.', 'error');
                }
            });
        });

        var submitButton = $('#addRecordForm button[type="submit"]');

        function checkWingBanInputs() {
            var isInvalid = false;

            $('.wingban-input').each(function () {
                if ($(this).hasClass('is-invalid')) {
                    isInvalid = true;
                    return false;
                }
            });

            if (isInvalid) {
                submitButton.prop('disabled', true);
            } else {
                submitButton.prop('disabled', false);
            }
        }

        $('.wingban-input').on('input', function () {
            var wingBanInput = $(this);
            var wingBan = wingBanInput.val().trim();

            if (wingBan !== "") {
                $.ajax({
                    url: '@Url.Action("CheckWingBan", "Home")',
                    type: 'GET',
                    data: { wingBan: wingBan },
                    success: function (response) {
                        if (response.exists) {
                            wingBanInput.addClass('is-invalid');
                            wingBanInput.siblings('.invalid-feedback').removeClass('d-none');
                        } else {
                            wingBanInput.removeClass('is-invalid');
                            wingBanInput.siblings('.invalid-feedback').addClass('d-none');
                        }
                        checkWingBanInputs();
                    },
                    error: function () {
                        console.error('An error occurred while checking the Wing Ban number.');
                    }
                });
            } else {
                wingBanInput.removeClass('is-invalid');
                wingBanInput.siblings('.invalid-feedback').addClass('d-none');
                checkWingBanInputs();
            }
        });

        checkWingBanInputs();

        $('#configModal').on('show.bs.modal', function () {
            $.ajax({
                url: '@Url.Action("GetConfigValue", "Home")',
                type: 'GET',
                success: function (result) {
                    if (result.value !== undefined) {
                        $('#configInput').val(result.value);
                    } else {
                        $('#configInput').val(1);
                    }
                },
                error: function () {
                    Swal.fire({
                        title: 'Error',
                        text: 'An error occurred while retrieving the configuration value.',
                        icon: 'error',
                        showConfirmButton: false,
                        timer: 2000
                    });
                }
            });
        });

        $('#saveConfig').click(function () {
            var selectedValue = $('#configInput').val();

            $.ajax({
                url: '@Url.Action("SaveConfig", "Home")',
                type: 'POST',
                data: { value: selectedValue },
                success: function (result) {
                    if (result.success) {
                        Swal.fire({
                            title: 'Success',
                            text: 'Data saved successfully.',
                            icon: 'success',
                            showConfirmButton: false,
                            timer: 2000
                        }).then(function () {
                            location.reload();
                        });
                    } else {
                        Swal.fire('Error!', response.message, 'error');
                    }
                },
                error: function () {
                    Swal.fire({
                        title: 'Error',
                        text: 'An error occurred while processing the request.',
                        icon: 'error',
                        showConfirmButton: false,
                        timer: 2000
                    });
                }
            });
        });
    });
</script>

<script>

    function editEntry(entryId) {
        $.ajax({
            url: '@Url.Action("GetEntryDetails", "Home")',
            type: 'GET',
            data: { id: entryId },
            success: function (response) {
                if (!response.success) {
                    Swal.fire({
                        title: 'Error',
                        text: response.message,
                        icon: 'error'
                    });
                    return;
                }

                var data = response.data;

                $('#editEntryName').val(data.EntryName || '');
                $('#editOwnerName').val(data.OwnerName || '');
                $('#editBet').val(data.Bet || '');
                $('#editEntryId').val(data.EntryId || '');

                $('#editWeightsContainer').empty();
                $('#editWingBansContainer').empty();

                $('#editWeightsContainer').append('<label>WEIGHT</label>');
                $('#editWingBansContainer').append('<label>WB #</label>');

                if (Array.isArray(data.EntryData)) {
                    data.EntryData.forEach(function (item, index) {
                        var weightInput = `<div>
                            <input type="text" class="form-control mb-2" name="EntryData[${index}].Weight" value="${item.Weight || ''}" />
                        </div>`;
                        var wingBanInput = `<div>
                            <input type="text" class="form-control mb-2" name="EntryData[${index}].WingBan" value="${item.WingBan || ''}" />
                        </div>`;
                        $('#editWeightsContainer').append(weightInput);
                        $('#editWingBansContainer').append(wingBanInput);

                        console.log('Weights Container:', $('#editWeightsContainer').html());
                        console.log('Wing Bans Container:', $('#editWingBansContainer').html());
                    });
                } else {
                    console.warn('EntryData is not an array:', data.EntryData);
                }

                $('#editRecordModal').modal('show');
            },
            error: function () {
                Swal.fire({
                    title: 'Error',
                    text: 'An error occurred while retrieving the entry details.',
                    icon: 'error'
                });
            }
        });
    }

    $('#editRecordForm').on('submit', function (e) {
        e.preventDefault();

        var entryId = $('#editEntryId').val();
        var entryName = $('#editEntryName').val();
        var ownerName = $('#editOwnerName').val();
        var bet = $('#editBet').val();
        var entryData = [];

        $('#editWeightsContainer .form-control').each(function (index) {
            var weight = $(this).val().trim();
            var wingBan = $('#editWingBansContainer .form-control').eq(index).val().trim();
            if (weight !== "" || wingBan !== "") {
                entryData.push({
                    Weight: weight !== "" ? parseFloat(weight) : null,
                    WingBan: wingBan
                });
            }
        });

        var entry = {
            EntryId: parseInt(entryId),
            EntryName: entryName,
            OwnerName: ownerName,
            Bet: bet,
            EntryData: entryData
        };

        $.ajax({
            url: '@Url.Action("UpdateEntry", "Home")',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(entry),
            success: function (response) {
                if (response.success) {
                    Swal.fire({
                        title: 'Success',
                        text: 'Data updated successfully.',
                        icon: 'success',
                        showConfirmButton: false,
                        timer: 2000
                    }).then(function () {
                        location.reload();
                    });
                } else {
                    Swal.fire('Error', response.message, 'error');
                }
            },
            error: function () {
                Swal.fire('Error', 'An error occurred while processing the request.', 'error');
            }
        });
    });

    $('#saveEditBtn').click(function () {
        var entryId = $('#editEntryId').val();
        var entryName = $('#editEntryName').val();
        var ownerName = $('#editOwnerName').val();
        var bet = $('#editBet').val();

        $.ajax({
            url: '@Url.Action("UpdateEntry", "Home")',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({
                entryId: entryId,
                entryName: entryName,
                ownerName: ownerName,
                bet: bet
            }),
            success: function (response) {
                if (response.success) {
                    Swal.fire({
                        title: 'Success',
                        text: 'Entry updated successfully.',
                        icon: 'success',
                        showConfirmButton: false,
                        timer: 2000
                    }).then(function () {
                        location.reload();
                    });
                } else {
                    Swal.fire('Error', response.message, 'error');
                }
            },
            error: function () {
                Swal.fire('Error', 'An error occurred while updating the entry.', 'error');
            }
        });
    });

    function deleteEntry(entryId) {
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    url: '@Url.Action("DeleteEntry", "Home")',
                    method: 'POST',
                    data: { id: entryId },
                    success: function (response) {
                        if (response.success) {
                            Swal.fire({
                                title: 'Deleted!',
                                text: response.message,
                                icon: 'success',
                                showConfirmButton: false,
                                timer: 2000
                            });

                            loadEntryData();
                        } else {
                            Swal.fire({
                                title: 'Error',
                                text: response.message,
                                icon: 'error',
                                showConfirmButton: false,
                                timer: 2000
                            });
                        }
                    },
                    error: function () {
                        Swal.fire({
                            title: 'Error',
                            text: 'An error occurred while deleting the entry.',
                            icon: 'error',
                            showConfirmButton: false,
                            timer: 2000
                        });
                    }
                });
            }
        });
    }

    function loadEntryData() {
        $.ajax({
            url: '@Url.Action("GetEntryData", "Home")',
            method: 'GET',
            success: function (data) {
                var tbody = $('#entryTableBody');
                tbody.empty();

                $.each(data, function (index, item) {
                    var row = '<tr>' +
                        '<td>' + item.EntryName + '</td>' +
                        '<td>' + item.OwnerName + '</td>' +
                        '<td>' + item.Bet + '</td>' +
                        '<td>' + item.Action + '</td>' +
                        '</tr>';
                    tbody.append(row);
                });
            },
            error: function () {
                Swal.fire({
                    title: 'Error',
                    text: 'An error occurred while retrieving the entry data.',
                    icon: 'error',
                    showConfirmButton: false,
                    timer: 2000
                });
            }
        });
    }

    $(document).ready(function () {
        loadEntryData();
    });
</script>
